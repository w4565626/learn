package com.learn.engineer;

/**
 * 负载均衡算法：
 * 1. 轮询：将请求按照顺序轮流地分配到各个服务器上，每台服务器请求数相同，适用于服务器硬件基本相同的情况，
 *
 * 2. 加权轮询：在轮询算法的基础添加了权重的条件，根据服务器硬件不同设置不同的权重。
 *
 * 3. 随机：随机生成一个数字，来指定服务器。
 *
 * 4. 加权随机：在随机算法的基础上添加了权重的条件。
 *
 * 5. 最小连接法：哪个服务器的连接少，就分配给哪个服务器新的请求。可能出现弱服务器连接少，请求落在弱服务器，造成弱服务器连接高于强服务器，建议加权。
 *
 * 6. 源地址哈希法：获取客户端的IP，计算出IP的哈希值，映射到相对应的服务器上。
 */
public class LoadBalance {

    /**
     * nginx的负载均衡算法：
     * 1. 轮询（默认）：每个请求按时间顺序分配到每个服务器，服务器down掉，能自动剔除。
     *
     * 2. weight（加权轮询）：指定轮询几率，weight和访问比率成正比，用于服务器性能不均情况。
     *
     * 3. ip_hash：每个请求按照IP的hash结果来分配，每个访客固定访问一个后端服务器，解决session的问题。
     *
     * 4. fair（第三方）：按后端服务器的响应时间来分配请求，响应时间短的优先。请求能最快响应
     *
     * 5. url_hash（第三方）：按访问的URL的hash结果来分配请求，使每个URL定向到同一个后端服务器，后端服务器为缓存时有效。
     *
     */
}
